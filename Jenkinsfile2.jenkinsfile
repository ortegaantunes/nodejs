#!groovy
//@Library(value='jenkins-sharedlibs@master', changelog=false)_
//@Library(value='ontrack-jenkins-cli-pipeline@1.0', changelog=false)_

@Library('ontrack-library') _


pipeline {
agent {
    kubernetes {
      label 'nodejs'
      nodeSelector 'ciworkers'
      containerTemplate {
        name 'nodejs'
        image 'ortega87/nodejs-buildbox:1.3'
        command 'sleep'
        args '9999999'
        resourceRequestCpu '50m'
        resourceLimitCpu '100m'
        resourceRequestMemory '100Mi'
        resourceLimitMemory '200Mi'
      }
      podRetention onFailure()
    }
  }
    
    environment {
      project_name='ontrack-poc-ci'
      DOCKER_REGISTRY_NAME = ''
      jenkins_sp_id = 'jenkins_sp'
      SONAR_HOST_URL = ''
      SONAR_AUTH_TOKEN = ''
      SONAR_PROJECT_KEY = ''
      SONAR_INCLUSIONS = "e2e_tests/*.test.js,app/__tests__/*.test.js,app/*.js,e2e_tests/*.js"
   //   ONTRACK_SCM = 'github'
     // ONTRACK_PROJECT_NAME = 'POC'
      ONTRACK_URL = 'http://ontrack.ontrack.svc.cluster.local:8080'
     ONTRACK_TOKEN = 'e9a3592e-172f-48ec-bc87-8b849772d871'
      
    }
   
    options {
        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '20')
        disableConcurrentBuilds()    
        skipStagesAfterUnstable() 
        timeout(time: 1, unit: 'HOURS')
        parallelsAlwaysFailFast()
    }

    stages {
        stage('Ontrack_Down'){
            steps{
            ontrackCliDownload(
            logging: 'true'
            )
            sh 'ontrack-cli version --cli'
            }
        }
        stage('Ontrack_Connect'){
            steps{
            ontrackCliConnect(
                url: '${ONTRACK_URL}',
                credentialsId: '${ONTRACK_TOKEN}'
                )
            }
        }
        stage('Ontrack_Setup') {
            steps{
            ontrackCliSetup(
                    project: 'POC',
                    branch: 'Library',
                    logging: true,
                     autoValidationStamps: true,
                     validations: [
                         [
                            name: "BUILD",
                            tests: [
                                warningIfSkipped: true,
                            ]
                         ],
                         [
                            name: "FS-Check",
                            fscheck: [
                                failed: [
                                    level: 'CRITICAL',
                                    value: 1,
                                ],
                                warning: [
                                    level: 'HIGH',
                                    value: 1,
                                ]
                            ],
                         ],
                         [
                            name: "PERCENTAGE",
                            percentage: [
                                failure: 80,
                                warning: 50,
                                okIfGreater: false,
                            ],
                         ],
                         [
                            name: "METRICS",
                            metrics: true
                         ],
                         [
                           name: "GENERIC",
                         ]
                     ],
                     promotions: [
                        BRONZE: [
                            validations: [
                                "BUILD"
                            ]
                        ],
                        SILVER: [
                            promotions: [
                                "BRONZE",
                            ],
                            validations: [
                                "CHML",
                                "PERCENTAGE",
                                "METRICS",
                            ],
                        ],
                     ]
                )
                ontrackCliBuild()                
            }
        }
            
        stage("init"){
          steps{
            script{
              sh "ls -la"
              sh "df -h"
              sh "env"
            }
          }
          post {
              always {
                  ontrackCliValidate(stamp: 'GENERIC')
                  ontrackCliValidateTests(stamp: 'BUILD')
                  ontrackCliValidateCHML(stamp: 'CHML', critical: 0, high: 0, medium: 13, low: 218)
                  ontrackCliValidatePercentage(stamp: 'PERCENTAGE', value: 34)
                  ontrackCliValidateMetrics(stamp: 'METRICS', metrics: [
                      ui: 88,
                      backend: 67.3,
                      network: 15.0,
                  ])
              }
          }
        }
        /*stage ('Build') {
            steps { 
                container('nodejs') {
                sh """
                npm install
                """ 
                }
            }
            post {
                always {
                    ontrackBuild(
                        project: 'POC',
                        branch: "NodeJS-Demo",
                        build: "${env.BUILD_ID}",
                        gitCommit: "${env.GIT_COMMIT}",
                    )
                }
                success {
                    ontrackValidate(
                        project: 'POC',
                        branch: "NodeJS-Demo",
                        build: "${env.BUILD_ID}",
                        validationStamp: "Build",
                        buildResult: currentBuild.result,
                        description: "Build Step Passed",
                    )
                }
                failure {
                    ontrackValidate(
                        project: 'POC',
                        branch: "NodeJS-Demo",
                        build: "${env.BUILD_ID}",
                        validationStamp: "Build",
                        buildResult: currentBuild.result,
                        description: "Build Step Failed",
                    )
                }
            }
        }
        stage ('Lint') {
            steps {
                container('nodejs'){
                sh """
                npm test
                """
                }
            }
            post {
                success {
                    ontrackValidate(
                        project: 'POC',
                        branch: "NodeJS-Demo",
                        build: "${env.BUILD_ID}",
                        validationStamp: "LINT",
                        buildResult: currentBuild.result,
                        description: "Static Code Analysis is OK",
                    )
                }
                failure {
                    ontrackValidate(
                        project: 'POC',
                        branch: "NodeJS-Demo",
                        build: "${env.BUILD_ID}",
                        validationStamp: "LINT",
                        buildResult: currentBuild.result,
                        description: "Static Code Analysis is Failing",
                    )
                }
            }
        }
            stage ('E2E') {
            steps {
                container('nodejs'){
                sh """
                npm run test:e2e
                """
                }
            }
            post {
                success {
                    ontrackValidate(
                        project: 'POC',
                        branch: "NodeJS-Demo",
                        build: "${env.BUILD_ID}",
                        validationStamp: "E2E",
                        buildResult: currentBuild.result,
                        description: "End to End Test is OK",
                    )
                }
                failure {
                    ontrackValidate(
                        project: 'POC',
                        branch: "NodeJS-Demo",
                        build: "${env.BUILD_ID}",
                        validationStamp: "E2E",
                        buildResult: currentBuild.result,
                        description: "End to End Test is Failing",
                    )
                }
            }
        }*/
        /*     stage('Sonar') {
            steps{
              script{
                echo 'Start Analysis Code'
                withSonarQubeEnv ("sonar") {
                      sh "/opt/sonar-scanner/bin/sonar-scanner -X \
                      -Dsonar.projectKey=$SONAR_PROJECT_KEY \
                      -Dsonar.host.url=$SONAR_HOST_URL \
                      -Dsonar.test.inclusions=$SONAR_INCLUSIONS \
                      -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \
                      -Dsonar.testExecutionReportPaths=coverage/test-reporter.xml \
                      -Dsonar.login=$SONAR_AUTH_TOKEN \
                      -Dsonar.projectBaseDir=. \
                      -Dsonar.projectVersion=${env.BUILD_ID} \
                      -Dsonar.sourceEncoding=UTF-8 \
                      -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \
                      -Dsonar.sources=." 
                    }   
                }
            }
            post {
                success {
                    ontrackValidate(
                        project: 'POC',
                        branch: "NodeJS-Demo",
                        build: "${env.BUILD_ID}",
                        validationStamp: "sonarqube",
                        buildResult: currentBuild.result,
                        description: "Sonarqube",
                    )
                }
                failure {
                    ontrackValidate(
                        project: 'POC',
                        branch: "NodeJS-Demo",
                        build: "${env.BUILD_ID}",
                        validationStamp: "sonarqube",
                        buildResult: currentBuild.result,
                        description: "Sonarqube",
                    )
                }
            }
        } */       
    }
   /*  post {
      success {
        script {
            ontrackValidate(project: 'POC',branch: "NodeJS-Demo",build: "${env.BUILD_ID}",validationStamp: "JOB",buildResult: currentBuild.result,description: "Job Completed with Success")
        }
      }    
      unstable {
        script {
            ontrackValidate(project: 'POC',branch: "NodeJS-Demo",build: "${env.BUILD_ID}",validationStamp: "JOB",buildResult: currentBuild.result,description: "Job has some unstable Stager")
        }
      }
      failure {
        script {
            ontrackValidate(project: 'POC',branch: "NodeJS-Demo",build: "${env.BUILD_ID}",validationStamp: "JOB",buildResult: currentBuild.result,description: "Job Failed all, please check the Logs")
          }
        }
    } */
}
